# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    admin.blog:
        class: AppBundle\Admin\BlogAdmin
        arguments: [~, AppBundle\Entity\Blog, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Article }
        public: true

    admin.commentaire:
            class: AppBundle\Admin\CommentairesAdmin
            arguments: [~, AppBundle\Entity\commentaires, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Commentaires }
            public: true

    admin.utilisateur:
                    class: AppBundle\Admin\UserAdmin
                    arguments: [~, AppBundle\Entity\User, ~]
                    tags:
                        - { name: sonata.admin, manager_type: orm, label: Utilisateur }
                    public: true

    admin.competence:
                            class: AppBundle\Admin\CompetenceAdmin
                            arguments: [~, AppBundle\Entity\Competence, ~]
                            tags:
                                - { name: sonata.admin, manager_type: orm, label: competence }
                            public: true

    admin.experience:
                            class: AppBundle\Admin\ExperienceAdmin
                            arguments: [~, AppBundle\Entity\Experience, ~]
                            tags:
                                - { name: sonata.admin, manager_type: orm, label: experience }
                            public: true

    admin.diplome:
                                    class: AppBundle\Admin\DiplomeAdmin
                                    arguments: [~, AppBundle\Entity\Diplome, ~]
                                    tags:
                                        - { name: sonata.admin, manager_type: orm, label: diplome }
                                    public: true

    admin.realisation:
                                    class: AppBundle\Admin\RealisationAdmin
                                    arguments: [~, AppBundle\Entity\Realisation, ~]
                                    tags:
                                        - { name: sonata.admin, manager_type: orm, label: realisation }
                                    public: true


    admin.me:
                                        class: AppBundle\Admin\MeAdmin
                                        arguments: [~, AppBundle\Entity\Me, ~]
                                        tags:
                                            - { name: sonata.admin, manager_type: orm, label: Personnel }
                                        public: true